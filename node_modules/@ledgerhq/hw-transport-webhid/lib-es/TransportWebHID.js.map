{"version":3,"sources":["../src/TransportWebHID.js"],"names":["Transport","hidFraming","identifyUSBProductId","ledgerUSBVendorId","log","TransportOpenUserCancelled","DisconnectedDeviceDuringOperation","DisconnectedDevice","TransportError","ledgerDevices","vendorId","isSupported","Promise","resolve","global","navigator","hid","getHID","requestLedgerDevices","device","requestDevice","filters","Array","isArray","getLedgerDevices","devices","getDevices","filter","d","getFirstLedgerDevice","existingDevices","length","TransportWebHID","constructor","deviceModel","channel","Math","floor","random","packetSize","inputs","inputCallback","read","shift","success","onInputReport","e","buffer","Buffer","from","data","push","_disconnectEmitted","_emitDisconnect","emit","exchange","apdu","exchangeAtomicImpl","toString","framing","blocks","makeBlocks","i","sendReport","result","acc","getReducedResult","reduceResponse","catch","message","includes","productId","addEventListener","request","open","openConnected","transport","onDisconnect","removeEventListener","close","exchangeBusyPromise","setScrambleKey","list","listen","observer","unsubscribed","then","error","next","type","descriptor","complete","unsubscribe"],"mappings":"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","sourcesContent":["//@flow\nimport Transport from \"@ledgerhq/hw-transport\";\nimport type {\n  Observer,\n  DescriptorEvent,\n  Subscription,\n} from \"@ledgerhq/hw-transport\";\nimport hidFraming from \"@ledgerhq/devices/lib/hid-framing\";\nimport { identifyUSBProductId, ledgerUSBVendorId } from \"@ledgerhq/devices\";\nimport type { DeviceModel } from \"@ledgerhq/devices\";\nimport { log } from \"@ledgerhq/logs\";\nimport {\n  TransportOpenUserCancelled,\n  DisconnectedDeviceDuringOperation,\n  DisconnectedDevice,\n  TransportError,\n} from \"@ledgerhq/errors\";\n\nconst ledgerDevices = [{ vendorId: ledgerUSBVendorId }];\n\nconst isSupported = () =>\n  Promise.resolve(!!(global.navigator && global.navigator.hid));\n\nconst getHID = (): HID => {\n  // $FlowFixMe\n  const { hid } = navigator;\n  if (!hid)\n    throw new TransportError(\n      \"navigator.hid is not supported\",\n      \"HIDNotSupported\"\n    );\n  return hid;\n};\n\nasync function requestLedgerDevices(): Promise<HIDDevice[]> {\n  const device = await getHID().requestDevice({ filters: ledgerDevices });\n  if (Array.isArray(device)) return device;\n  return [device];\n}\n\nasync function getLedgerDevices(): Promise<HIDDevice[]> {\n  const devices = await getHID().getDevices();\n  return devices.filter((d) => d.vendorId === ledgerUSBVendorId);\n}\n\nasync function getFirstLedgerDevice(): Promise<HIDDevice> {\n  const existingDevices = await getLedgerDevices();\n  if (existingDevices.length > 0) return existingDevices[0];\n  const devices = await requestLedgerDevices();\n  return devices[0];\n}\n\n/**\n * WebHID Transport implementation\n * @example\n * import TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\n * ...\n * TransportWebHID.create().then(transport => ...)\n */\nexport default class TransportWebHID extends Transport<HIDDevice> {\n  device: HIDDevice;\n  deviceModel: ?DeviceModel;\n  channel = Math.floor(Math.random() * 0xffff);\n  packetSize = 64;\n\n  constructor(device: HIDDevice) {\n    super();\n    this.device = device;\n    this.deviceModel = identifyUSBProductId(device.productId);\n    device.addEventListener(\"inputreport\", this.onInputReport);\n  }\n\n  inputs = [];\n  inputCallback: ?(Buffer) => void;\n\n  read = (): Promise<Buffer> => {\n    if (this.inputs.length) {\n      return Promise.resolve(this.inputs.shift());\n    }\n    return new Promise((success) => {\n      this.inputCallback = success;\n    });\n  };\n\n  onInputReport = (e: InputReportEvent) => {\n    const buffer = Buffer.from(e.data.buffer);\n    if (this.inputCallback) {\n      this.inputCallback(buffer);\n      this.inputCallback = null;\n    } else {\n      this.inputs.push(buffer);\n    }\n  };\n\n  /**\n   * Check if WebUSB transport is supported.\n   */\n  static isSupported = isSupported;\n\n  /**\n   * List the WebUSB devices that was previously authorized by the user.\n   */\n  static list = getLedgerDevices;\n\n  /**\n   * Actively listen to WebUSB devices and emit ONE device\n   * that was either accepted before, if not it will trigger the native permission UI.\n   *\n   * Important: it must be called in the context of a UI click!\n   */\n  static listen = (\n    observer: Observer<DescriptorEvent<HIDDevice>>\n  ): Subscription => {\n    let unsubscribed = false;\n    getFirstLedgerDevice().then(\n      (device) => {\n        if (!device) {\n          observer.error(\n            new TransportOpenUserCancelled(\"Access denied to use Ledger device\")\n          );\n        } else if (!unsubscribed) {\n          const deviceModel = identifyUSBProductId(device.productId);\n          observer.next({ type: \"add\", descriptor: device, deviceModel });\n          observer.complete();\n        }\n      },\n      (error) => {\n        observer.error(new TransportOpenUserCancelled(error.message));\n      }\n    );\n    function unsubscribe() {\n      unsubscribed = true;\n    }\n    return { unsubscribe };\n  };\n\n  /**\n   * Similar to create() except it will always display the device permission (even if some devices are already accepted).\n   */\n  static async request() {\n    const [device] = await requestLedgerDevices();\n    return TransportWebHID.open(device);\n  }\n\n  /**\n   * Similar to create() except it will never display the device permission (it returns a Promise<?Transport>, null if it fails to find a device).\n   */\n  static async openConnected() {\n    const devices = await getLedgerDevices();\n    if (devices.length === 0) return null;\n    return TransportWebHID.open(devices[0]);\n  }\n\n  /**\n   * Create a Ledger transport with a HIDDevice\n   */\n  static async open(device: HIDDevice) {\n    await device.open();\n    const transport = new TransportWebHID(device);\n    const onDisconnect = (e) => {\n      if (device === e.device) {\n        getHID().removeEventListener(\"disconnect\", onDisconnect);\n        transport._emitDisconnect(new DisconnectedDevice());\n      }\n    };\n    getHID().addEventListener(\"disconnect\", onDisconnect);\n    return transport;\n  }\n\n  _disconnectEmitted = false;\n  _emitDisconnect = (e: Error) => {\n    if (this._disconnectEmitted) return;\n    this._disconnectEmitted = true;\n    this.emit(\"disconnect\", e);\n  };\n\n  /**\n   * Release the transport device\n   */\n  async close(): Promise<void> {\n    await this.exchangeBusyPromise;\n    this.device.removeEventListener(\"inputreport\", this.onInputReport);\n    await this.device.close();\n  }\n\n  /**\n   * Exchange with the device using APDU protocol.\n   * @param apdu\n   * @returns a promise of apdu response\n   */\n  exchange = (apdu: Buffer): Promise<Buffer> =>\n    this.exchangeAtomicImpl(async () => {\n      const { channel, packetSize } = this;\n      log(\"apdu\", \"=> \" + apdu.toString(\"hex\"));\n\n      const framing = hidFraming(channel, packetSize);\n\n      // Write...\n      const blocks = framing.makeBlocks(apdu);\n      for (let i = 0; i < blocks.length; i++) {\n        await this.device.sendReport(0, blocks[i]);\n      }\n\n      // Read...\n      let result;\n      let acc;\n      while (!(result = framing.getReducedResult(acc))) {\n        const buffer = await this.read();\n        acc = framing.reduceResponse(acc, buffer);\n      }\n\n      log(\"apdu\", \"<= \" + result.toString(\"hex\"));\n      return result;\n    }).catch((e) => {\n      if (e && e.message && e.message.includes(\"write\")) {\n        this._emitDisconnect(e);\n        throw new DisconnectedDeviceDuringOperation(e.message);\n      }\n      throw e;\n    });\n\n  setScrambleKey() {}\n}\n"],"file":"TransportWebHID.js"}